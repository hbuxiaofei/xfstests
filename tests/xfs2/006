#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016 Red Hat, Inc.  All Rights Reserved.
#
# FS QA Test 006
#
# Test xfs' "fail at unmount" error handling configuration. Stop
# XFS from retrying to writeback forever at unmount.
#
. ./common/preamble
_begin_fstest auto quick mount eio

# Override the default cleanup function.
_cleanup()
{
	_kill_fsstress
	_dmerror_cleanup
	cd /
	rm -f $tmp.*
}

# Import common functions.
. ./common/filter
. ./common/dmerror

_require_scratch
_require_dm_target error
_require_fs_sysfs error/fail_at_unmount

_scratch_mkfs > $seqres.full 2>&1
_dmerror_init
_dmerror_mount

# Make sure all error handling attributes are original status
_reset_xfs_sysfs_error_handling $DMERROR_DEV

# Make sure fail_at_unmount is enabled, so XFS stops retrying on
# errors at unmount time. _fail the test if we fail to set it to 1,
# because the test probably will hang in such case and block
# subsequent tests.
attr=`_get_fs_sysfs_attr $DMERROR_DEV error/fail_at_unmount`
if [ "$attr" != "1" ]; then
	_fail "Failed to set error/fail_at_unmount: $attr"
fi

# start a metadata-intensive workload, but no data allocation operation.
# Because uncompleted new space allocation I/Os may cause XFS to shutdown
# after loading error table.
#
#  -z :     将所有操作的频率重置为 0（需后续通过 -f 重新设置）
#  -n :     设置每个进程执行的操作次数（默认 1）
#           -n 5000  每个进程执行 5000 次操作后退出
#  -p :     指定并发执行的进程数量（默认 1）
#           -p 10  使用 10 个进程并发操作
#  -f resvsp :      通过 resvsp，文件系统会提前为文件保留（预留）指定的磁盘空间，但不会实际写入数据
#                   避免碎片化，预分配可以保证文件后续写入时拥有连续的磁盘空间，提升 I/O 性能（尤其对大型文件重要）
#  -f punch :       打洞释放空间，稀疏文件（sparse file），释放文件中的块，但保留文件逻辑大小
_run_fsstress -z -n 5000 -p 10 \
	       -f creat=10 \
	       -f resvsp=1 \
	       -f truncate=1 \
	       -f punch=1 \
	       -f chown=5 \
	       -f mkdir=5 \
	       -f rmdir=1 \
	       -f mknod=1 \
	       -f unlink=1 \
	       -f symlink=1 \
	       -f rename=1 \
	       -d $SCRATCH_MNT/fsstress

# Loading error table without "--nolockfs" option. Because "--nolockfs"
# won't freeze fs, then some running I/Os may cause XFS to shutdown
# prematurely. That's not what we want to test.
_dmerror_load_error_table lockfs
_dmerror_unmount

# Mount again to replay log after loading working table, so we have a
# consistent XFS after test.
_dmerror_load_working_table
_dmerror_mount
_dmerror_unmount

# success, all done
status=0
exit
